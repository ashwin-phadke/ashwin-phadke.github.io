[{"authors":["admin"],"categories":null,"content":"Ashwin worked as a AI and Deep Learning Engineer helping apply computer vision applications in the field of mobility, healthcare and industrial QC/QA. With around 2 years of total experience in computer vision and deep learning his research interests also include artificial neural netwoks and natural language processing.\nHe has been a speaker at leading tech conferences and meetups. He also serves as a mentor for incubated startups by working with startup founders to upskill their workforce in the field of deep learning, computer vision. He has also trained 500+ students by speaking at various mentoring sessions and seminars in colleges.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/author/ashwin-phadke/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/ashwin-phadke/","section":"authors","summary":"Ashwin worked as a AI and Deep Learning Engineer helping apply computer vision applications in the field of mobility, healthcare and industrial QC/QA. With around 2 years of total experience in computer vision and deep learning his research interests also include artificial neural netwoks and natural language processing.","tags":null,"title":"Ashwin Phadke","type":"authors"},{"authors":[],"categories":[],"content":"Background : It is always a daunting task with Tensorflow sessions and standard handling of a typical Tensorflow model when you want to run inference. However, if you are an experienced developer you may also quickly go through these steps because you are already aware about how to use Tensorflow to run inference on your model. Most of the times we use some image pre-processing over the input image before passing it to your model built using Tensorflow. This pre-processing is mostly handled using OpenCV or such libraries or something like imutils for basic handling of images or video frames. How about using OpenCV itself to load and run inference on your Tensorflow models, this is what I encountered very recently when I was stuck with a problem while using Tensorflow sessions, although being straightforward these Tensorflow sessions can sometimes take some little extra time to manage while doing inference. OpenCV handles it quite well and we are going to discuss it here in this blog post.\nPre-requisites : You have been from\nimport cv2 import tensorflow as tf  To\nresults : person - 84%  Loading TF models using OpenCV : The Opencv\u0026rsquo;s DNN module hosts a variety of great features when it comes to utilizing the library for neural networks. One such important addition is Tensorflow\u0026rsquo;s object detection API using OpenCV\u0026rsquo;s dnn module. If you have not installed OpenCV with it\u0026rsquo;s extra modules also called as OpenCV Contrib modules you can read one of my previous post on how to do that here.\nGetting started : For this tutorial we require the Tensorflow models in a specific manner, needn\u0026rsquo;t worry because they are quite easily available through the TF model zoo.\nThe result of training a model using Tensorflow is a binary file with extension .pb which contains both topology and weights of trained network. You may download one of them from Model Zoo,\nOnce you have the .pb file you will also need a .pbtxt file which is an extra configuration file required which you can find here for many pretrained models and below you can find a good list from the OpenCV wiki to help you get started faster.\n   Model Version Version Weights(.pb) prototxt(.pbtxt)     MobileNet-SSD v1 2017_11_17 weights config   MobileNet-SSD v1 PPN 2018_07_03 weights config   MobileNet-SSD v2 2018_03_29 weights config   Inception-SSD v2 2017_11_17 weights config   MobileNet-SSD v3 (see #16760) 2020_01_14 weights config   Faster-RCNN Inception v2 2018_01_28 weights config   Faster-RCNN ResNet-50 2018_01_28 weights config   Mask-RCNN Inception v2 2018_01_28 weights config   EfficientDet-D0 (see #17384) weights config    Furthermore, if you would like to convert your own models you can refer the following scripts for a better context to how to get the required files.\n  tf_text_graph_ssd.py  tf_text_graph_common.py  tf_text_graph_faster_rcnn.py  tf_text_graph_mask_rcnn.py  You can pass the configuration file which was used for training to get your pbtxt file to determine the hyperparameters.\npython tf_text_graph_faster_rcnn.py --input /path/to/model.pb --config /path/to/example.config --output /path/to/graph.pbtxt  Now that we have the required files , let us dive right into the code.\nTHe module we need is the cv2's dnn module readNetFromTensorflow which accepts .pb and .pbtxt as arguments. According to opencv docs these arguments are defined as :\nmodel - path to the .pb file with binary protobuf description of the network architecture config - path to the .pbtxt file that contains text graph definition in protobuf format. Resulting Net object is built by text graph using weights from a binary one that let us make it more flexible.  To then load your model you can do\nNet = cv2.dnn.readNetFromTensorflow(PATH_TO_CKPT, PATH_TO_PBTXT)  Once you have laoded your model with config you then need to pass your image/frame to the net to perform inference.\nNet.setInput(cv2.dnn.blobFromImage(img, size=(300, 300), swapRB=True, crop=False)) detections = Net.forward()  Here blobFromImage creates 4-dimensional blob from image. Optionally it also resizes and crops image from center, subtract mean values, scales values by scalefactor, swap Blue and Red channels.\nThe parameters can be defined as as shown in the above example\nimage - input image (with 1-, 3- or 4-channels). size - spatial size for output image mean - scalar with mean values which are subtracted from channels. Values are intended to be in (mean-R, mean-G, mean-B) order if image has BGR ordering and swapRB is true. scalefactor - multiplier for image values. swapRB - flag which indicates that swap first and last channels in 3-channel image is necessary. crop - flag which indicates whether image will be cropped after resize or not ddepth - Depth of output blob. Choose CV_32F or CV_8U.  Whereas the Net.forward runs forward pass to compute output of layer with name outputName. That\u0026rsquo;s it those are the changes, now you just need to loop over the detections with a desired accuracy metric and get your final result as you would otherwise get by using Tensorflow directly( bounding boxes ).\nYou now need to put all the pieces together to getting started on this:\nTo run inference on an image you can use the following script :\n import cv2 # Load a model imported from Tensorflow tensorflowNet = cv2.dnn.readNetFromTensorflow('frozen_inference_graph.pb', 'graph.pbtxt') # Input image img = cv2.imread(PATH_TO_YOUR_IMAGE) rows, cols, channels = img.shape # Use the given image as input blob(s). tensorflowNet.setInput(cv2.dnn.blobFromImage(img, size=(300, 300), swapRB=True, crop=False)) networkOutput = tensorflowNet.forward() # Loop on the outputs for detection in networkOutput[0,0]: score = float(detection[2]) if score \u0026gt; 0.2: left = detection[3] * cols top = detection[4] * rows right = detection[5] * cols bottom = detection[6] * rows #draw a red rectangle around detected objects cv2.rectangle(img, (int(left), int(top)), (int(right), int(bottom)), (0, 0, 255), thickness=2) # Show the image with a rectagle surrounding the detected objects cv2.imshow('Image', img) cv2.waitKey() cv2.destroyAllWindows()  Well you are now set. You can expect output similar to this :\nLet\u0026rsquo;s just not stop right here, how about processing videos for a bit more addition to this along with the showing labels over those bounding boxes. This post has you covered, you can use the following code to achieve this:\nfrom imutils.video import VideoStream from imutils.video import FPS import numpy as np import argparse import imutils import time import cv2 # construct the argument parse and parse the arguments ap = argparse.ArgumentParser() ap.add_argument(\u0026quot;-c\u0026quot;, \u0026quot;--confidence\u0026quot;, type=float, default=0.8, help=\u0026quot;minimum probability to filter weak detections\u0026quot;) args = vars(ap.parse_args()) classes_90 = [ \u0026quot;person\u0026quot;, \u0026quot;bicycle\u0026quot;, \u0026quot;car\u0026quot;, \u0026quot;motorcycle\u0026quot;, \u0026quot;airplane\u0026quot;, \u0026quot;bus\u0026quot;, \u0026quot;train\u0026quot;, \u0026quot;truck\u0026quot;, \u0026quot;boat\u0026quot;, \u0026quot;traffic light\u0026quot;, \u0026quot;fire hydrant\u0026quot;, \u0026quot;unknown\u0026quot;, \u0026quot;stop sign\u0026quot;, \u0026quot;parking meter\u0026quot;, \u0026quot;bench\u0026quot;, \u0026quot;bird\u0026quot;, \u0026quot;cat\u0026quot;, \u0026quot;dog\u0026quot;, \u0026quot;horse\u0026quot;, \u0026quot;sheep\u0026quot;, \u0026quot;cow\u0026quot;, \u0026quot;elephant\u0026quot;, \u0026quot;bear\u0026quot;, \u0026quot;zebra\u0026quot;, \u0026quot;giraffe\u0026quot;, \u0026quot;unknown\u0026quot;, \u0026quot;backpack\u0026quot;, \u0026quot;umbrella\u0026quot;, \u0026quot;unknown\u0026quot;, \u0026quot;unknown\u0026quot;, \u0026quot;handbag\u0026quot;, \u0026quot;tie\u0026quot;, \u0026quot;suitcase\u0026quot;, \u0026quot;frisbee\u0026quot;, \u0026quot;skis\u0026quot;, \u0026quot;snowboard\u0026quot;, \u0026quot;sports ball\u0026quot;, \u0026quot;kite\u0026quot;, \u0026quot;baseball bat\u0026quot;, \u0026quot;baseball glove\u0026quot;, \u0026quot;skateboard\u0026quot;, \u0026quot;surfboard\u0026quot;, \u0026quot;tennis racket\u0026quot;, \u0026quot;bottle\u0026quot;, \u0026quot;unknown\u0026quot;, \u0026quot;wine glass\u0026quot;, \u0026quot;cup\u0026quot;, \u0026quot;fork\u0026quot;, \u0026quot;knife\u0026quot;, \u0026quot;spoon\u0026quot;, \u0026quot;bowl\u0026quot;, \u0026quot;banana\u0026quot;, \u0026quot;apple\u0026quot;, \u0026quot;sandwich\u0026quot;, \u0026quot;orange\u0026quot;, \u0026quot;broccoli\u0026quot;, \u0026quot;carrot\u0026quot;, \u0026quot;hot dog\u0026quot;, \u0026quot;pizza\u0026quot;, \u0026quot;donut\u0026quot;, \u0026quot;cake\u0026quot;, \u0026quot;chair\u0026quot;, \u0026quot;couch\u0026quot;, \u0026quot;potted plant\u0026quot;, \u0026quot;bed\u0026quot;, \u0026quot;unknown\u0026quot;, \u0026quot;dining table\u0026quot;, \u0026quot;unknown\u0026quot;, \u0026quot;unknown\u0026quot;, \u0026quot;toilet\u0026quot;, \u0026quot;unknown\u0026quot;, \u0026quot;tv\u0026quot;, \u0026quot;laptop\u0026quot;, \u0026quot;mouse\u0026quot;, \u0026quot;remote\u0026quot;, \u0026quot;keyboard\u0026quot;, \u0026quot;cell phone\u0026quot;, \u0026quot;microwave\u0026quot;, \u0026quot;oven\u0026quot;, \u0026quot;toaster\u0026quot;, \u0026quot;sink\u0026quot;, \u0026quot;refrigerator\u0026quot;, \u0026quot;unknown\u0026quot;, \u0026quot;book\u0026quot;, \u0026quot;clock\u0026quot;, \u0026quot;vase\u0026quot;, \u0026quot;scissors\u0026quot;, \u0026quot;teddy bear\u0026quot;, \u0026quot;hair drier\u0026quot;, \u0026quot;toothbrush\u0026quot; ] CLASSES = classes_90 #New list of classess with 90 classess. print(CLASSES) COLORS = np.random.uniform(0, 255, size=(len(CLASSES), 3)) cvNet = cv2.dnn.readNetFromTensorflow(PATH_TO_PB, PATH_TO_PBTXT) cap = cv2.VideoCapture(INPUT_VIDEO) while cap.isOpened(): ret, frame = cap.read() if not ret: break h = frame.shape[0] w = frame.shape[1] img = np.array(frame) cvNet.setInput(cv2.dnn.blobFromImage(img, size=(300, 300), swapRB=True, crop=False)) detections = cvNet.forward() # loop over the detections for i in np.arange(0, detections.shape[2]): # extract the confidence (i.e., probability) associated with # the prediction confidence = detections[0, 0, i, 2] # filter out weak detections by ensuring the `confidence` is # greater than the minimum confidence if confidence \u0026gt; args[\u0026quot;confidence\u0026quot;]: # extract the index of the class label from the # `detections`, then compute the (x, y)-coordinates of # the bounding box for the object idx = int(detections[0, 0, i, 1]) print(idx ) box = detections[0, 0, i, 3:7] * np.array([w, h, w, h]) (startX, startY, endX, endY) = box.astype(\u0026quot;int\u0026quot;) # draw the prediction on the frame label = \u0026quot;{}: {:.2f}%\u0026quot;.format(CLASSES[idx], confidence * 100) cv2.rectangle(img, (startX, startY), (endX, endY), COLORS[idx], 2) y = startY - 15 if startY - 15 \u0026gt; 15 else startY + 15 cv2.putText(img, label, (startX, y), cv2.FONT_HERSHEY_SIMPLEX, 0.5, COLORS[idx], 2) #print(label) out_img = cv2.resize(img, (640, 480)) cv2.imshow('img', out_img) if cv2.waitKey(25) \u0026amp; 0xFF == ord('q'): cv2.destroyAllWindows()  You can also run your model using also the python script from the OpenCV documentation as given below:\nimport numpy as np import tensorflow as tf import cv2 as cv # Read the graph. with tf.gfile.FastGFile('frozen_inference_graph.pb', 'rb') as f: graph_def = tf.GraphDef() graph_def.ParseFromString(f.read()) with tf.Session() as sess: # Restore session sess.graph.as_default() tf.import_graph_def(graph_def, name='') # Read and preprocess an image. img = cv.imread('example.jpg') rows = img.shape[0] cols = img.shape[1] inp = cv.resize(img, (300, 300)) inp = inp[:, :, [2, 1, 0]] # BGR2RGB # Run the model out = sess.run([sess.graph.get_tensor_by_name('num_detections:0'), sess.graph.get_tensor_by_name('detection_scores:0'), sess.graph.get_tensor_by_name('detection_boxes:0'), sess.graph.get_tensor_by_name('detection_classes:0')], feed_dict={'image_tensor:0': inp.reshape(1, inp.shape[0], inp.shape[1], 3)}) # Visualize detected bounding boxes. num_detections = int(out[0][0]) for i in range(num_detections): classId = int(out[3][0][i]) score = float(out[1][0][i]) bbox = [float(v) for v in out[2][0][i]] if score \u0026gt; 0.3: x = bbox[1] * cols y = bbox[0] * rows right = bbox[3] * cols bottom = bbox[2] * rows cv.rectangle(img, (int(x), int(y)), (int(right), int(bottom)), (125, 255, 51), thickness=2) cv.imshow('TensorFlow MobileNet-SSD', img) cv.waitKey()  ","date":1597939731,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597939731,"objectID":"b11eb88f551c8ebb7000f597b9ba72c2","permalink":"/post/load-tensorflow-models-using-opencv/","publishdate":"2020-08-20T21:38:51+05:30","relpermalink":"/post/load-tensorflow-models-using-opencv/","section":"post","summary":"Background : It is always a daunting task with Tensorflow sessions and standard handling of a typical Tensorflow model when you want to run inference. However, if you are an experienced developer you may also quickly go through these steps because you are already aware about how to use Tensorflow to run inference on your model.","tags":[],"title":"Load Tensorflow Models Using Opencv","type":"post"},{"authors":["Ashwin Phadke"],"categories":null,"content":"Dive into an overview of hyperparameter tuning ro find the best hyperparameters for your deep learning model. The keras-tuner package can be used to define a search space for multiple hyperparameters like learning rate, optimizers, units among many others to facilite optimal hyperparameter search to obtain the best model for your desired datatset.\nSummary of the talk :\n Brief about convolutions, pooling. Introduction to Keras Tuner. Tunable hyperparameters. Overview of built in algorithms for hyperparameter tuning like Hyperband. Code : Google colab demo   ","date":1595050200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1595050200,"objectID":"0e14f0fe7fddd5f1530f1cc110f76911","permalink":"/talk/keras-tuner-with-tensorflow/","publishdate":"2020-07-06T20:35:05+05:30","relpermalink":"/talk/keras-tuner-with-tensorflow/","section":"talk","summary":"Dive into an overview of hyperparameter tuning ro find the best hyperparameters for your deep learning model. The keras-tuner package can be used to define a search space for multiple hyperparameters like learning rate, optimizers, units among many others to facilite optimal hyperparameter search to obtain the best model for your desired datatset.","tags":[],"title":"Keras Tuner With Tensorflow","type":"talk"},{"authors":[],"categories":[],"content":"Background During a very recent webinar where I was a speaker for the topic Deep learning with TensorFlow I repeatedly was asked a question regarding how would one really define their own layers, parameter and how they work so as to watch it do the magic while showing them some notebooks that had parameters to the layers that we regularly use. This prompted me to write a blog explaining layers and their parameters.\nBuilding Tensorflow Layers The tf.keras.layers.Layer or also written as tf.compat.v1.keras.layers.Layer gives you easy and effective access to start writing your own layers in building the desired convolutional neural network. Keras backend is well integrated with TensorFlow giving you ease of coding your layers at a high level understanding and handles a ot of code that you would otherwise would\u0026rsquo;ve written.\nWriting your own layers is not that daunting if you have a certain understanding on how they work. According to the TensorFlow documentation\n Many machine learning models are expressible as the composition and stacking of relatively simple layers, and TensorFlow provides both a set of many common layers as a well as easy ways for you to write your own application-specific layers either from scratch or as the composition of existing layers.\n Which is pretty much True in the sense that these layers can be written like calling functions with arguments. Here in the tf.keras.layers package the layers that we want to define are treated as objects. So to construct a simple layer by yourself all you need is to construct the layer object and you are pretty much good to go.\nSome widely used layers include\n Conv1D Conv2D AvgPool1D Dense Flatten LSTMCell  and many more. To start defining your own layers is no hidden secret and can be easily achieved by doing (we will be looking at Sequential layers here)\nmodel = tf.keras.models.Sequntial() or model = tf.compat.v1.keras.Sequential() or model = tf.compat.v1.keras.models.Sequential()  Here the most important task of defining the type of your layers is done. Let\u0026rsquo;s look at some of these layers and their functions one by one. Once you are ready with your network or at least have an idea of how many layers you would like to write for a standard result you can proceed to now defining them. What Sequential essentially does it groups a linear stack of layers. Once you have done that now you are ready to construct your own layer objects.\nAfter declaring above you can either do\nmodel = tf.keras.models.Sequential() model.add(tf.keras.layers.Dense(8, input_dim=16))  OR\nmodel = tf.keras.Sequentail([ tf.keras.layers.Dense(8, input_dim=18)])  Both these methods will help you achieve your goal of writing your own layers. To begin with let\u0026rsquo;s build our own complete network and understand each parameters.\nmodel = tf.keras.models.Sequential([ tf.keras.layers.Conv2D(64, (3,3), activation='relu', input_shape=(28, 28, 1)), # Max pooling as we will take maximum value which is a 2X2 poll so every 4 pixels go to 1 tf.keras.layers.MaxPooling2D(2, 2), # Another layer tf.keras.layers.Conv2D(64, (3,3), activation='relu'), tf.keras.layers.MaxPooling2D(2,2), # Converts the input to 1D set instead of the square we saw earlier tf.keras.layers.Flatten(), # Adds a layer of neurons tf.keras.layers.Dense(128, activation='relu'), # The last layers have specific number of neurons, ask me why! :) tf.keras.layers.Dense(10, activation='softmax') ])  Now once we have built our layer, let\u0026rsquo;s try to understand it one by one. We have already seen in brief about Sequential(), let\u0026rsquo;s now dive into the layers. The module tf.keras.layers.Layer has different classes defined for all different kinds of models some of which are also listed above.\n  In the first layer Conv2D(64, (3,3), activation='relu', input_shape=(28, 28, 1)), refers to class Conv2D.\n This layers creates a conv kernel to convolve with input to produce tensors. Activation function needs to be defined here and also if this layer is being used as the first layer in this model as shown in this example it is important to include input_shape as in input_shape = (128, 128, 3) for an image that is 128 X 128 pixel wide with three channels mainly RGB or use 1if it is a grey scale image. Arguments here include :  the filter size as 64 , which creates 64 filters to convolve over the input. the size of the kernel which is defined as (3, 3). activation is set to as relu, what ReLU activation in brief means that the output values from this activation function are positives as all values in the left of the number line are counted as 0. the input_shape as defined above here is an grey scale image with size 28 X 28 pixels hence (28, 28, 1). Input shape can be defined as (batch_size, rows, cols, channels) to understand order and meaning of the parameters. other arguments which can be added are strides, padding, use_bias and many more based on the requirements.      The second layer tf.keras.layers.MaxPooling2D(2, 2), is a maxpooling layer for which more information can be found here.\n This layers creates a max pooling operation for 2D spatial data. Arguments here include :  MaxPooling is used to down-sample the data or the input to it by taking the maximum value from the window defined by pool_size which here is (2, 2). The window is shifted by strides which are values by which we define by how many pixels our window moves ahead through the input representations. If padding is defined as same the output shape becomes output shape = input_shape / strides and output shape = (input_shape - pool_size + 1) / strides) when padding size is defined as valid. This returns 4D tensor representing maximum pooled values.      The third layer tf.keras.layers.Flatten() which is a layer in between the convolutional layer and a fully connected layer.\n As evident from the name it flattens the input into a 1D vector that can be fed to a fully connected classifier layer. The main argument here data_format as when inputs are shaped (batch,) without a channel dimension, then flattening adds an extra channel dimension and output shapes are (batch, 1) - TFDocs. In this case the input is 28X28X3 with 64 filter which makes the output of the Flatten layer to 64X28X28 = 50176 as a 1D vector instead of multi-dimension as in previous layers.    The fourth layer  tf.keras.layers.Dense(10, activation='softmax') adds a single layer to your network which is densely or fully connected.\n Each neuron declared here is connected to or receives input from all neurons from previous layers hence the name as densely connected. Dense implements the operation: output = activation(dot(input, kernel) + bias) where activation is the element-wise activation function passed as the activation argument, kernel is a weights matrix created by the layer, and bias is a bias vector created by the layer (only applicable if use_bias is True). - TFDocs The final layer is the layer that can be described here as output layer. The number 10 here is the number of classes that we are fed or the number of outputs that are to be observed. One needs to understand that the output is not however a one shot yes or no but a list of probabilities of all the classes wherein then the highest probability is the prediction done by the model. More importantly we are using the function softmax here which in simple words mean that the highest probability will be treated as 1 and all others as 0. This might sound somewhat like maxpool but these are two different concepts. Softmax function can also be loosely defined as the function that converts logits to probabilities that sum to 1. In short if the result of classes is like [0.1, 0.4, 0.5] then the Softmax will return [0, 0, 1] . Known use-cases of softmax regression are in discriminative models such as Cross-Entropy and Noise Contrastive Estimation.    Writing your own layers becomes more important when you want to build a fully custom solution which otherwise cannot be achieved using transfer learning(although being an decent method if you want a prototype). This helps you understand the tool you are using here TensorFlow and also get an understanding of how SoTA neural netwrks work and what do those layers mean or how the authors reached to those specific parameter values. We have networks ranging from 20 layers to more than a 100 with huge complexity which we aim to ease here by understanding the design process.\nI would also suggest going through the Tensorflow documentation extensively as they are a offiial resource of class and functions available in the TensorFlow API with a very good description of every parameter in detail.\nIn a jiffy We took a look at a higher level understanding of various TensorFlow layers, what do they mean and what do their arguments mean in brief. You can start building your own model from scratch(well let\u0026rsquo;s say just calling classes and functions :) ) and test them out by tuning various parameters mentioned and from the function definitions too and maybe you\u0026rsquo;ll soon have a best performing model in your profile. Happy coding!\n Code for reference | GitHub | Website |\nReferences :\n[1] Tensorflow documentation - https://www.tensorflow.org/api_docs/python/tf\n[2] Softmax function simpplified - https://towardsdatascience.com/softmax-function-simplified-714068bf8156\n[3] Wikipedia\n[4] Coursera - Tensorflow lectures by Laurence Moroney\n ","date":1592929634,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1592929634,"objectID":"405412f33d1a1511f200f081a151bb19","permalink":"/post/build-layers-tf-python/","publishdate":"2020-06-23T21:57:14+05:30","relpermalink":"/post/build-layers-tf-python/","section":"post","summary":"Background During a very recent webinar where I was a speaker for the topic Deep learning with TensorFlow I repeatedly was asked a question regarding how would one really define their own layers, parameter and how they work so as to watch it do the magic while showing them some notebooks that had parameters to the layers that we regularly use.","tags":[],"title":"Build your own layers for deep learning models using TensorFlow 2.0 and Python","type":"post"},{"authors":["Ashwin Phadke"],"categories":null,"content":"","date":1592397000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1592397000,"objectID":"b5bcf8bfce1cd9ddf0147be6258f68f5","permalink":"/talk/intro-to-deep-learning/","publishdate":"2020-06-10T21:56:29+05:30","relpermalink":"/talk/intro-to-deep-learning/","section":"talk","summary":"A brief introduction to deep learning-computer vision and using tensorflow to building models.","tags":[],"title":"[Invited]Introduction to Deep Learning using Tensorflow","type":"talk"},{"authors":[],"categories":[],"content":"","date":1592152335,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1592152335,"objectID":"b2db37ffb7405a22c5305d48542d2431","permalink":"/project/cvplayground/","publishdate":"2020-06-14T22:02:15+05:30","relpermalink":"/project/cvplayground/","section":"project","summary":"","tags":["Deep Learning"],"title":"Computer Vision Playground","type":"project"},{"authors":[],"categories":[],"content":"","date":1591805592,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591805592,"objectID":"62c3aea1ae23e4553e1ea6f216a92e9f","permalink":"/project/object-detection/","publishdate":"2020-06-10T21:43:12+05:30","relpermalink":"/project/object-detection/","section":"project","summary":"","tags":["Deep Learning"],"title":"Object Detection","type":"project"},{"authors":[],"categories":[],"content":"","date":1591805295,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591805295,"objectID":"a1cc83c0cd852ce8cac0a513ab54fe00","permalink":"/project/smart-anti-breach/","publishdate":"2020-06-10T21:38:15+05:30","relpermalink":"/project/smart-anti-breach/","section":"project","summary":"","tags":["Android"],"title":"Smart Anti Breach","type":"project"},{"authors":[],"categories":[],"content":"","date":1591805211,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591805211,"objectID":"7793f9f91bfb4935fdf511e7534eb33a","permalink":"/project/zappchat/","publishdate":"2020-06-10T21:36:51+05:30","relpermalink":"/project/zappchat/","section":"project","summary":"","tags":["Android"],"title":"Android chat application : Zappchat (from Rivchat)","type":"project"},{"authors":[],"categories":[],"content":"","date":1591802103,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591802103,"objectID":"dd81e60e07e512e61051f226e3533751","permalink":"/project/face-recognition/","publishdate":"2020-06-10T20:45:03+05:30","relpermalink":"/project/face-recognition/","section":"project","summary":"","tags":["Deep Learning"],"title":"Face Recognition using Python and OpenCV Haarcascades","type":"project"},{"authors":[],"categories":[],"content":"","date":1591721781,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591721781,"objectID":"b2f67c141c5ebe247c3d9f43910c765a","permalink":"/project/optical-flow/","publishdate":"2020-06-09T22:26:21+05:30","relpermalink":"/project/optical-flow/","section":"project","summary":"","tags":["Deep Learning"],"title":"Optical Flow using OpenCV and Python","type":"project"},{"authors":[],"categories":[],"content":"","date":1591721509,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591721509,"objectID":"b7dc37925842e7a6407794963b5163a9","permalink":"/project/canny-edge-detection/","publishdate":"2020-06-09T22:21:49+05:30","relpermalink":"/project/canny-edge-detection/","section":"project","summary":"","tags":["Deep Learning"],"title":"Canny Edge Detection using OpenCV and C++","type":"project"},{"authors":[],"categories":[],"content":"","date":1591721251,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591721251,"objectID":"a2485e742e184638ed19f88e6110c508","permalink":"/project/find-dominant-color/","publishdate":"2020-06-09T22:17:31+05:30","relpermalink":"/project/find-dominant-color/","section":"project","summary":"","tags":["Deep Learning"],"title":"Find Dominant Color from an image using OpenCV and C++","type":"project"},{"authors":["Ashwin Phadke"],"categories":[],"content":"Why the sudden need? I have mostly used the OpenCV library as available from pip or by installing wheel until I required some more essential features that are not available from those pre built binaries. However the installation looking fairly simple can have a lot of issues if not done correctly and hence the reason for being so mnay questions on forums out there on the internet pertaining to the installation issues:\nLet\u0026rsquo;s begin :\nAlthough it is always a best practice to create a virtual environment so as to keep your project dependencies sorted but skipping the step here. If you want to create one or know more about those you can visit this link for more information .\n Clone git clone https://github.com/opencv/opencv.git the official OpenCV repository from Github to have the latest updated version for use.  This will create a folder named opencv in your home directory.\n Some dependencies need to be taken care of before building OpenCV for use. These dependencies are IMPORTANT to facilitate the proper installation of opencv on the system and avoiding errors like no module found and etc even after having a successful install.  The must have dependenices :\n * dnf install cmake * dnf install python-devel numpy * dnf install gcc gcc-c++ * dnf install make    GTK support :\n * dnf install gtk2-devel * dnf install libdc1394-devel * dnf install libv4l-devel * dnf install ffmpeg-devel * dnf install gstreamer-plugins-base-devel    For parallelizing functions in opencv on Intel machines you can install Threaded building blocks yum install tbb-devel . If you install this pass -D WITH_TBB=ON while building OpenCV with CMake.\n  Similarly for optimized mathematical operations install dnf install eigen3-devel and pass -D WITH_EIGEN=ON as earlier.\n  Create a folder named build wherein you\u0026rsquo;ll configure and build the library to later install by doing mkdir build cd build\n  Installing OpenCV - OpenCV is typically installed using CMake as(explanation from the documentation) - Installation has to be configured with CMake. It specifies which modules are to be installed, installation path, which additional libraries to be used, whether documentation and examples to be compiled etc. Below command is normally used for configuration (executed from build folder).\n  To configure build parameters using CMake you will pass the following command for minimal installation in release mode\ncmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local ..\n  If you have installed the threading building blocks then you pass\ncmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local .. -D WITH_TBB=ON\n  If you have installed the eigen library then do\ncmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local .. -D WITH_EIGEN=ON .\n  If installed both then\ncmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local .. -D WITH_EIGEN=ON -D WITH_TBB=ON\n  Now to also include non free algorithms(optional) you will need to add the specific parameter to it as :\ncmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local .. -D WITH_EIGEN=ON -D WITH_TBB=ON -D OPENCV_ENABLE_NONFREE=ON\n  We have now set up our opencv installation command, many a times opencv\u0026rsquo;s extra modules also help you solve many computer vision challentasks and it is better to have the contrib i.e extra modules with opencv as a additional step. Hence to do so first clone the opencv contrib module from Github using\ngit clone https://github.com/opencv/opencv_contrib.git\n  to a seperate folder than your opencv directory.\n  Doing so it is then required to pass the path to the downloaded contrib modules to the build configuration of opencv. To do that use the follwoing command\ncmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local .. -D WITH_EIGEN=ON -D WITH_TBB=ON -D OPENCV_ENABLE_NONFREE=ON -D OPENCV_EXTRA_MODULES_PATH=\u0026lt;opencv_contrib_path\u0026gt;/modules \u0026lt;opencv_source_directory_path\u0026gt; .\n  This will serve as your final command to installl opencv with all the required modules.\n Finally execute make install to successfully build and install the OpenCV library on your Linux Fedora machine.   ","date":1591715746,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591715746,"objectID":"e49039830dc2d0190f45c538eb4f39a2","permalink":"/post/install-opencv/","publishdate":"2020-06-09T20:45:46+05:30","relpermalink":"/post/install-opencv/","section":"post","summary":"Why the sudden need? I have mostly used the OpenCV library as available from pip or by installing wheel until I required some more essential features that are not available from those pre built binaries.","tags":[],"title":"Installing OpenCV with contrib extra modules from source on Fedora Linux","type":"post"},{"authors":[],"categories":null,"content":"","date":1591637958,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591637958,"objectID":"41f96000cb4b9108c4a37dc62f2dd258","permalink":"/talk/pdctalk/","publishdate":"2020-06-08T23:09:18+05:30","relpermalink":"/talk/pdctalk/","section":"talk","summary":"","tags":[],"title":"Invited to talk about Understanding evaluation metrics","type":"talk"},{"authors":[],"categories":[],"content":"Machine learning basic concepts explained as notes from various courses, books and blogs to my understanding.\nConfusion Matrix Confusion matrix as a evaluation metric has been discussed a lot. Indeed, the reason being it\u0026rsquo;s wide usability and f1-score being a important metric in order to evaluate those classification models. Here we take a look at understanding the confusion matrix in a rather simple way.\nLet us assume a dataset with around 40 rows of customer chrun according to a survey from a leading company. The confusion matrix herein will include the matrix of corrected and wrong predictions done on actual labels i.e the outcomes of the preditions on actual labels.\nThe matrix is represented as :\nrows : Contain actual or true labels in the test set i.e here the labels given by the survey. columns : Contain predicted labels by the classifier trained on the customer survey dataset.  It is imperative to understand this relation so as to identify how accurate was the prediction done from the classifier.\nWe are going to see a binary classifcation example.\nWe know that such evalutaion metrics shows the models ability to correctly predict or seperate the classes. We will be also discussing f1-score here which is also important to learn along with confusion matrix.\nThe confusion matrix helps you measure some of very important metrics to assess performance of your model like .\n- Precision. - Recall. - Accuracy and plot ROC-AUC curve too.  Let us first dive into ddefining certain terminologies to better understand the concept of confusion matrix.\n- True Positive : Model predicted true and it is correct as per labels. - False Positive : Model predicted true but it is actually false. - True Negative : Model predicted false and it is false. - False Negative : Model predicted false but it is True.  The image clearly illustrates how these values are divided in the matrix.\nWe will take a look at how to calculate the values for the metrics derived from this matrix(lol, rhyme)\nPrecision is a measure of accuracy provided that a class label has been predicted.\nPrecision = True Positive __________________________ True Positve + False Positive  Recall = True Positive ______________________________ True Positve + False Negative   f1-score = 2 X Precision + Recall ______________________ Precision X Recall  Thus, average accuracy can be calculated using average of all f1-scores and the desired values is 1. F1-score can also be used for multi class classifiers.\nIf you want to learn more you can always refer to Wikipedia for more.\n ","date":1589988031,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589988031,"objectID":"ad0d2e49cdc624132c410390445a8d56","permalink":"/post/ml-dl-confusion-matrix/","publishdate":"2020-05-20T20:50:31+05:30","relpermalink":"/post/ml-dl-confusion-matrix/","section":"post","summary":"Machine learning basic concepts explained as notes from various courses, books and blogs to my understanding.\nConfusion Matrix Confusion matrix as a evaluation metric has been discussed a lot. Indeed, the reason being it\u0026rsquo;s wide usability and f1-score being a important metric in order to evaluate those classification models.","tags":[],"title":"Understanding Confusion matrix for machine learning in a simple way","type":"post"},{"authors":["Ashwin Phadke"],"categories":[],"content":"Here is a guide to getting started with SQL Server and Azure Data Studio on Linux.\nWhen I was starting on in my career , databases always meant the MySQL and PHP way to implement anything. However even though MySQL is really a gem SQL Server and it\u0026rsquo;s functionality gives you the full enterprise like experience and ease to implement into your code and especially the activity manager aka activity monitor which I fell for immediately.\nStarting with SQL server and that too Linux is not very easy a task. Mostly the primary reason being that all the config files and supporting installation scripts are python 2.x compatible which is strange considering how long ago python 3.x was launched. I did not have python 2.x and did not want two python versions on my PC so I took up the task to convert most of the available installation scripts to support python 3.x and which is yet in progress giving the sheer amount of things needed to change. Meanwhile the development couldn\u0026rsquo;t have waited and hence I am writing a guide to facilitate ease in installing SQL Server on Linux. The documentation is pretty good in describing things but also is a lot of different pages to visit for a simple task. Hence adding it all under one page here.\nMy Machine configuration is as follows(for reference) :\n Intel I3-6006U 4GB / 1TB Dual boot  Fedora 31 Windows 10   Python 2.7 and 3.5 with pip package manager.  To successfully install SQL server and start using it follow the following steps carefully:\n  Update your system : Run sudo dnf update followed with sudo dnf upgrade to have the most recent updates to your Fedora machine. If you are using Debian/Ubuntu you can simply do sudo apt-get update and sudo apt-get upgrade respectively.\n  Download SQL configuration file from Red Hat repository :\n  sudo curl -o /etc/yum.repos.d/mssql-server.repo https://packages.microsoft.com/config/rhel/8/mssql-server-2019.repo\nTo Install the SQL server run :  sudo yum install -y mssql-server\nThis will install all the primary requirements for SQL server.\nNow to configure your SQL server installation you need to run the following command in order to complete the installation. The configuration step includes various options to add/remove add-ons to your SQL server installation and also to choose your edition.  sudo /opt/mssql/bin/mssql-conf setup\n This will fully install SQL server on your machine. Installation doesn\u0026rsquo;t take much time as most of the stuff is already done in Step 4 and step 5 includes configurations and settings that are needed to be installed in order to run the server.\n  Run systemctl status mssql-server to check whether the service is running or not. You can also use the standard start and stop for systemctl to change the service state.\n  So far we have installed SQL server but we also need to be able to access it, you can use pyodbc for all your python needs , also UnixODBC to connect via python program and/or command line. For that you will need some command line tools which you can learn to install here following steps by clicking here . The reason for not including here is :\n It is already included on the link like the above steps too. The focus here is SQL Server + Azure Data Studio   To install Azure Data studio in a very simple way click here for version 1.15.1\n  After the successful installation it will show up in your app directory.\n  Simply start using command azuredatastudio in terminal or by clicking Azure data studio in apps and connect with the username and password that you had configured in step 4. Default username is SA\n  You have now successfully managed to install SQL Server using Azure Data Studio on Linux(Fedora).\n ","date":1583248375,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1583248375,"objectID":"2550a6b6b1e3ef22f904f2d225585395","permalink":"/post/my-article-name/","publishdate":"2020-03-03T20:42:55+05:30","relpermalink":"/post/my-article-name/","section":"post","summary":"Here is a guide to getting started with SQL Server and Azure Data Studio on Linux.\nWhen I was starting on in my career , databases always meant the MySQL and PHP way to implement anything.","tags":[],"title":"Getting started with SQL server on Linux (using Azure data studio)","type":"post"},{"authors":[],"categories":[],"content":"Compiling and executing C++ programs   Browse to the directory of your cpp program and open a terminal in that folder.\n  Create a CMake file name CMakeLists.txt in the same directory as your project :\n   cmake_minimum_required(VERSION 2.8) project( ProjectName ) find_package( OpenCV REQUIRED )` add_executable( ProjectName your_program_main_file.cpp ) target_link_libraries( ProjectName ${OpenCV_LIBS} )   Now we can generate the executable so as to run the program. To do so execute   cmake . followed by\n make  on the terminal. The execution will run successfully and create binaries if there are no errors.\n To execute your compiled program enter ./ProjectName   ","date":1578583102,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1578583102,"objectID":"10c48c3f4e0675125a843a0b7cbd0adc","permalink":"/post/compile-cpp-program-opencv/","publishdate":"2020-01-09T20:48:22+05:30","relpermalink":"/post/compile-cpp-program-opencv/","section":"post","summary":"Compiling and executing C++ programs   Browse to the directory of your cpp program and open a terminal in that folder.\n  Create a CMake file name CMakeLists.txt in the same directory as your project :","tags":[],"title":"Compiling and executing OpenCV programs written in C++","type":"post"}]